// <auto-generated />
using System;
using AutoCareHub.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AutoCareHub.Data.Migrations
{
    [DbContext(typeof(AutoCareHubDbContext))]
    [Migration("20240329134117_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AutoCareHub.Data.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<Guid>("MainCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("AutoCareHub.Data.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("AutoCareHub.Data.Models.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("AutoCareHub.Data.Models.MainCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("MainCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("accfbc90-1486-44b8-9a97-caeecf550391"),
                            Name = "Car repair"
                        },
                        new
                        {
                            Id = new Guid("8317f4c5-3f8b-4020-bbcf-2adb5e30639b"),
                            Name = "Car maintenance"
                        },
                        new
                        {
                            Id = new Guid("6a62c3f8-aa54-4857-9599-fcbba31da47d"),
                            Name = "Body work"
                        },
                        new
                        {
                            Id = new Guid("3d804f6d-78f5-4796-ac7b-b0f741724164"),
                            Name = "Tuning and performance"
                        },
                        new
                        {
                            Id = new Guid("5f20784f-c7c1-43bb-bb9e-594aad69649e"),
                            Name = "Tire services"
                        },
                        new
                        {
                            Id = new Guid("61790e6f-1cb7-48b9-a207-8868ef458c63"),
                            Name = "Electrical services"
                        },
                        new
                        {
                            Id = new Guid("d8ca8195-48f6-4041-ac87-8b919d651e67"),
                            Name = "Inspections and diagnostics"
                        },
                        new
                        {
                            Id = new Guid("f9cd2d78-221c-46ff-9a2f-8d22e3a3f2a3"),
                            Name = "Exterior washing"
                        },
                        new
                        {
                            Id = new Guid("fe659df3-55ef-4c4b-b163-3a40f2c23397"),
                            Name = "Interior cleaning"
                        },
                        new
                        {
                            Id = new Guid("b17b4f22-1199-4220-b651-e3e6b2927a0a"),
                            Name = "Detailing services"
                        },
                        new
                        {
                            Id = new Guid("f2c8d10f-f034-420f-a08f-c3d964689b72"),
                            Name = "Premium packages"
                        });
                });

            modelBuilder.Entity("AutoCareHub.Data.Models.MainCategoryService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MainCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.HasIndex("ServiceId");

                    b.ToTable("MainCategoryServices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b04cddc-8fa9-4f11-b6b2-6276eb8cf094"),
                            MainCategoryId = new Guid("accfbc90-1486-44b8-9a97-caeecf550391"),
                            ServiceId = new Guid("dc4ee450-7e0d-4d13-b93f-474487d355d0")
                        },
                        new
                        {
                            Id = new Guid("29b077dd-c570-42a7-ba9b-fee2832aa7bd"),
                            MainCategoryId = new Guid("8317f4c5-3f8b-4020-bbcf-2adb5e30639b"),
                            ServiceId = new Guid("ba0914fa-d680-4f2d-97b4-b6197e7a3902")
                        },
                        new
                        {
                            Id = new Guid("804aff14-701a-4908-8b7f-8a23d66a18dd"),
                            MainCategoryId = new Guid("6a62c3f8-aa54-4857-9599-fcbba31da47d"),
                            ServiceId = new Guid("49450e6e-3fea-483c-9df8-ea6f9c91c6f8")
                        },
                        new
                        {
                            Id = new Guid("1d836613-8598-46b9-b94b-02764d26bb66"),
                            MainCategoryId = new Guid("f9cd2d78-221c-46ff-9a2f-8d22e3a3f2a3"),
                            ServiceId = new Guid("31059a53-4346-4efb-a1e2-b404c16b7fb5")
                        });
                });

            modelBuilder.Entity("AutoCareHub.Data.Models.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("AutoCareHub.Data.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7c35c18b-3177-4ad1-8be7-141693a7272f"),
                            ConcurrencyStamp = "68be544a-11c3-493d-b40f-d6fa9b362c52",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = new Guid("b61a261f-5220-4176-9d49-ff18ecbd5b18"),
                            ConcurrencyStamp = "3a197fb9-6842-4b1a-ada3-89c75a45eaba",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("AutoCareHub.Data.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<TimeSpan>("CloseTime")
                        .HasColumnType("time");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan>("OpenTime")
                        .HasColumnType("time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc4ee450-7e0d-4d13-b93f-474487d355d0"),
                            Address = "ulitsa Orlovska 24",
                            City = "Gabrovo",
                            CloseTime = new TimeSpan(0, 18, 0, 0, 0),
                            Description = "Welcome to ServiceSelect — your one-stop destination for hassle-free car service. Browse, book, and relax as we connect you with trusted mechanics for all your automotive needs. Experience convenience at your fingertips. Get started today!",
                            ImageUrls = "[\"https://res.cloudinary.com/ddbrt2xfu/image/upload/v1708796935/a4jdxgbvivhpsctgjtku.png\"]",
                            Name = "ServiceSelect",
                            OpenTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = new Guid("62448744-4356-44dc-a005-0bfb6ba9e8b2")
                        },
                        new
                        {
                            Id = new Guid("ba0914fa-d680-4f2d-97b4-b6197e7a3902"),
                            Address = "ulitsa Hristo Belchev 10",
                            City = "Sofia",
                            CloseTime = new TimeSpan(0, 18, 0, 0, 0),
                            Description = "Experience the ultimate in automotive convenience with DriveEase. Say goodbye to long wait times and tedious phone calls—we've streamlined the process for you. From routine maintenance to emergency repairs, our platform connects you with skilled professionals ready to serve. Relax and let DriveEase take the wheel on your car care journey.",
                            ImageUrls = "[\"https://res.cloudinary.com/ddbrt2xfu/image/upload/v1708797988/nonue5t35kqw6tgsemng.jpg\"]",
                            Name = "CarProCare",
                            OpenTime = new TimeSpan(0, 9, 0, 0, 0),
                            UserId = new Guid("62448744-4356-44dc-a005-0bfb6ba9e8b2")
                        },
                        new
                        {
                            Id = new Guid("49450e6e-3fea-483c-9df8-ea6f9c91c6f8"),
                            Address = "ulitsa San Stefano 14",
                            City = "Varna",
                            CloseTime = new TimeSpan(0, 18, 0, 0, 0),
                            Description = "Welcome to AutoCare Connect—your one-stop destination for hassle-free car service. Browse, book, and relax as we connect you with trusted mechanics for all your automotive needs. Experience convenience at your fingertips. Get started today!",
                            ImageUrls = "[\"https://res.cloudinary.com/ddbrt2xfu/image/upload/v1708798216/zvk1f91ntnsvofjmu5hk.jpg\"]",
                            Name = "CarServiceCentral",
                            OpenTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = new Guid("c895a6a4-113d-4669-aa7a-5fecfe3b504c")
                        },
                        new
                        {
                            Id = new Guid("31059a53-4346-4efb-a1e2-b404c16b7fb5"),
                            Address = "ulitsa Ivan Vazov 17",
                            City = "Plovdiv",
                            CloseTime = new TimeSpan(0, 17, 0, 0, 0),
                            Description = "Welcome to AutoPureWash, where your vehicle's shine is our priority. Treat your car to a rejuvenating experience with our expert team and state-of-the-art equipment. From exterior washes to meticulous detailing, we offer a range of services tailored to suit your needs. Experience the ultimate in cleanliness and convenience at AutoPureWash—where every wash leaves your car sparkling like new.",
                            ImageUrls = "[\"https://res.cloudinary.com/ddbrt2xfu/image/upload/v1708797989/jhqtxfrhy22egoizyxia.jpg\"]",
                            Name = "AutoPureWash",
                            OpenTime = new TimeSpan(0, 8, 0, 0, 0),
                            UserId = new Guid("c895a6a4-113d-4669-aa7a-5fecfe3b504c")
                        });
                });

            modelBuilder.Entity("AutoCareHub.Data.Models.SubCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MainCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("13c8a627-246a-4217-b435-7b7895b37572"),
                            MainCategoryId = new Guid("accfbc90-1486-44b8-9a97-caeecf550391"),
                            Name = "Engine repairs"
                        },
                        new
                        {
                            Id = new Guid("c81fb26c-be24-4949-9131-e0da9bb2d2ca"),
                            MainCategoryId = new Guid("accfbc90-1486-44b8-9a97-caeecf550391"),
                            Name = "Brake repairs"
                        },
                        new
                        {
                            Id = new Guid("5146d4d9-edb9-4245-a238-57262f5aee94"),
                            MainCategoryId = new Guid("accfbc90-1486-44b8-9a97-caeecf550391"),
                            Name = "Transmission repairs"
                        },
                        new
                        {
                            Id = new Guid("d66b052f-20cf-4433-95d7-b679c29be81e"),
                            MainCategoryId = new Guid("accfbc90-1486-44b8-9a97-caeecf550391"),
                            Name = "Suspension repairs"
                        },
                        new
                        {
                            Id = new Guid("098abbe9-b25d-4d4c-a3cd-ad968d4ddeb5"),
                            MainCategoryId = new Guid("accfbc90-1486-44b8-9a97-caeecf550391"),
                            Name = "Exhaust system repairs"
                        },
                        new
                        {
                            Id = new Guid("0d3270e4-054f-44dc-8afe-018c4b08afdf"),
                            MainCategoryId = new Guid("accfbc90-1486-44b8-9a97-caeecf550391"),
                            Name = "Cooling system repairs"
                        },
                        new
                        {
                            Id = new Guid("908396e9-8005-4a01-a94b-3148f4db366e"),
                            MainCategoryId = new Guid("8317f4c5-3f8b-4020-bbcf-2adb5e30639b"),
                            Name = "Oil change"
                        },
                        new
                        {
                            Id = new Guid("e7569e41-86b7-434a-8f33-8f9dbe24da90"),
                            MainCategoryId = new Guid("8317f4c5-3f8b-4020-bbcf-2adb5e30639b"),
                            Name = "Filter replacements"
                        },
                        new
                        {
                            Id = new Guid("a5980160-9996-4674-af02-4d037bb40563"),
                            MainCategoryId = new Guid("8317f4c5-3f8b-4020-bbcf-2adb5e30639b"),
                            Name = "Fluid Checks and Replacements"
                        },
                        new
                        {
                            Id = new Guid("fb2dca30-5f4a-4159-ba71-6bc44428f915"),
                            MainCategoryId = new Guid("8317f4c5-3f8b-4020-bbcf-2adb5e30639b"),
                            Name = "Belt and Hose Inspections/Replacements"
                        },
                        new
                        {
                            Id = new Guid("1ae92eca-75b8-4c67-80a6-e735ba5978e2"),
                            MainCategoryId = new Guid("8317f4c5-3f8b-4020-bbcf-2adb5e30639b"),
                            Name = "Battery Checks and Replacements"
                        },
                        new
                        {
                            Id = new Guid("c3a5935f-0594-4787-8f34-e979a04c9c72"),
                            MainCategoryId = new Guid("6a62c3f8-aa54-4857-9599-fcbba31da47d"),
                            Name = "Dent repair"
                        },
                        new
                        {
                            Id = new Guid("5c1d3518-a1db-4227-9fc6-97f41a90431b"),
                            MainCategoryId = new Guid("6a62c3f8-aa54-4857-9599-fcbba31da47d"),
                            Name = "Scratch repair"
                        },
                        new
                        {
                            Id = new Guid("78f24d6e-46fe-4319-9e8b-dd874eb869b6"),
                            MainCategoryId = new Guid("6a62c3f8-aa54-4857-9599-fcbba31da47d"),
                            Name = "Paint touch-ups"
                        },
                        new
                        {
                            Id = new Guid("dff7ba0d-2d95-426e-8720-b1ac1a51c3f3"),
                            MainCategoryId = new Guid("6a62c3f8-aa54-4857-9599-fcbba31da47d"),
                            Name = "Bumper repair/replacement"
                        },
                        new
                        {
                            Id = new Guid("e2723369-65c2-4c3b-b065-eaaf5e7fbea0"),
                            MainCategoryId = new Guid("6a62c3f8-aa54-4857-9599-fcbba31da47d"),
                            Name = "Rust repair"
                        },
                        new
                        {
                            Id = new Guid("44cf2177-f416-4ac8-8a59-39789812f60f"),
                            MainCategoryId = new Guid("3d804f6d-78f5-4796-ac7b-b0f741724164"),
                            Name = "Engine tuning"
                        },
                        new
                        {
                            Id = new Guid("93a962f5-7480-4dd4-8a16-0903cba27f7f"),
                            MainCategoryId = new Guid("3d804f6d-78f5-4796-ac7b-b0f741724164"),
                            Name = "Suspension upgrades"
                        },
                        new
                        {
                            Id = new Guid("4282bf09-84d6-4959-a617-d5d77204783b"),
                            MainCategoryId = new Guid("3d804f6d-78f5-4796-ac7b-b0f741724164"),
                            Name = "Exhaust system upgrades"
                        },
                        new
                        {
                            Id = new Guid("eb8ea1f8-a631-413f-a74c-d6d305c5c972"),
                            MainCategoryId = new Guid("3d804f6d-78f5-4796-ac7b-b0f741724164"),
                            Name = "Performance chip installation"
                        },
                        new
                        {
                            Id = new Guid("a6105b47-b165-47f4-91dd-573d0941cd47"),
                            MainCategoryId = new Guid("3d804f6d-78f5-4796-ac7b-b0f741724164"),
                            Name = "Aesthetic modifications (body kits, spoilers, etc.)"
                        },
                        new
                        {
                            Id = new Guid("ab3564f7-d534-4cfb-ba38-316526022524"),
                            MainCategoryId = new Guid("5f20784f-c7c1-43bb-bb9e-594aad69649e"),
                            Name = "Tire rotation"
                        },
                        new
                        {
                            Id = new Guid("e96a5563-c720-4bab-8976-8cfda7fd09bf"),
                            MainCategoryId = new Guid("5f20784f-c7c1-43bb-bb9e-594aad69649e"),
                            Name = "Tire balancing"
                        },
                        new
                        {
                            Id = new Guid("0fbe31c2-c3d7-4d85-9fb4-f0498fd49cb8"),
                            MainCategoryId = new Guid("5f20784f-c7c1-43bb-bb9e-594aad69649e"),
                            Name = "Tire alignment"
                        },
                        new
                        {
                            Id = new Guid("e3e2e7e7-74f4-4c86-a42b-0c0eda97d017"),
                            MainCategoryId = new Guid("5f20784f-c7c1-43bb-bb9e-594aad69649e"),
                            Name = "Tire replacement"
                        },
                        new
                        {
                            Id = new Guid("f7da57a9-e68e-4440-8234-894fc63f102a"),
                            MainCategoryId = new Guid("5f20784f-c7c1-43bb-bb9e-594aad69649e"),
                            Name = "Tire Pressure Monitoring System (TPMS) Services"
                        },
                        new
                        {
                            Id = new Guid("e394f5f3-43f2-4dc2-a7f8-e6b801275e53"),
                            MainCategoryId = new Guid("61790e6f-1cb7-48b9-a207-8868ef458c63"),
                            Name = "Battery replacement"
                        },
                        new
                        {
                            Id = new Guid("0b5cbb43-a7e8-4c57-9079-144743e628bd"),
                            MainCategoryId = new Guid("61790e6f-1cb7-48b9-a207-8868ef458c63"),
                            Name = "Starter repair/replacement"
                        },
                        new
                        {
                            Id = new Guid("f730d322-61a8-4b4d-aaa0-2feafcfc8e11"),
                            MainCategoryId = new Guid("61790e6f-1cb7-48b9-a207-8868ef458c63"),
                            Name = "Wiring repairs"
                        },
                        new
                        {
                            Id = new Guid("3d7fd174-c8bb-4736-a471-a068d5d9ed48"),
                            MainCategoryId = new Guid("61790e6f-1cb7-48b9-a207-8868ef458c63"),
                            Name = "Accessory installation"
                        },
                        new
                        {
                            Id = new Guid("2ffbd815-9cd9-4705-b92e-2d399e92fb77"),
                            MainCategoryId = new Guid("61790e6f-1cb7-48b9-a207-8868ef458c63"),
                            Name = "Lighting System Repairs (headlights, taillights, etc.)"
                        },
                        new
                        {
                            Id = new Guid("00a801b4-c869-49a8-b7af-fe272f3c7a33"),
                            MainCategoryId = new Guid("d8ca8195-48f6-4041-ac87-8b919d651e67"),
                            Name = "Computer diagnostics"
                        },
                        new
                        {
                            Id = new Guid("81337b94-310e-489b-af1e-c7ec871d712d"),
                            MainCategoryId = new Guid("d8ca8195-48f6-4041-ac87-8b919d651e67"),
                            Name = "Emissions testing"
                        },
                        new
                        {
                            Id = new Guid("a86af07c-b7f1-49ad-a531-97d1d0f42378"),
                            MainCategoryId = new Guid("d8ca8195-48f6-4041-ac87-8b919d651e67"),
                            Name = "Check engine light diagnostics"
                        },
                        new
                        {
                            Id = new Guid("2fd08be9-afe6-4d07-96fa-6200ba603412"),
                            MainCategoryId = new Guid("d8ca8195-48f6-4041-ac87-8b919d651e67"),
                            Name = "Brake system inspections"
                        },
                        new
                        {
                            Id = new Guid("83f88cea-8cfc-4e1a-ac1c-fb584b3d651b"),
                            MainCategoryId = new Guid("d8ca8195-48f6-4041-ac87-8b919d651e67"),
                            Name = "Pre-purchase inspections"
                        },
                        new
                        {
                            Id = new Guid("03b580f6-af09-40cc-b68a-bdd9514b33cc"),
                            MainCategoryId = new Guid("f9cd2d78-221c-46ff-9a2f-8d22e3a3f2a3"),
                            Name = "Hand wash"
                        },
                        new
                        {
                            Id = new Guid("81f4bc54-7760-41a8-b3a1-15686003be70"),
                            MainCategoryId = new Guid("f9cd2d78-221c-46ff-9a2f-8d22e3a3f2a3"),
                            Name = "Automated wash"
                        },
                        new
                        {
                            Id = new Guid("898abea7-8b86-4535-8081-5d12adc717a3"),
                            MainCategoryId = new Guid("f9cd2d78-221c-46ff-9a2f-8d22e3a3f2a3"),
                            Name = "Pressure washing"
                        },
                        new
                        {
                            Id = new Guid("01baf66c-6c1a-4078-b663-a01b829594ca"),
                            MainCategoryId = new Guid("f9cd2d78-221c-46ff-9a2f-8d22e3a3f2a3"),
                            Name = "Foam cannon wash"
                        },
                        new
                        {
                            Id = new Guid("da92ee8e-c57b-4edc-b723-e8a415b6c5b7"),
                            MainCategoryId = new Guid("fe659df3-55ef-4c4b-b163-3a40f2c23397"),
                            Name = "Vacuuming"
                        },
                        new
                        {
                            Id = new Guid("b1a4a80a-aadb-4ea3-9ab0-2e185b4401d9"),
                            MainCategoryId = new Guid("fe659df3-55ef-4c4b-b163-3a40f2c23397"),
                            Name = "Dashboard and console cleaning"
                        },
                        new
                        {
                            Id = new Guid("1ac17698-13f1-45ec-a06a-bd79f2fc7ba5"),
                            MainCategoryId = new Guid("fe659df3-55ef-4c4b-b163-3a40f2c23397"),
                            Name = "Upholstery cleaning (cloth and leather)"
                        },
                        new
                        {
                            Id = new Guid("6dd2ecf1-4247-4917-be81-fc7ce8e16b90"),
                            MainCategoryId = new Guid("fe659df3-55ef-4c4b-b163-3a40f2c23397"),
                            Name = "Carpet cleaning"
                        },
                        new
                        {
                            Id = new Guid("20302865-c0f0-45ec-aa1c-051d3078e76a"),
                            MainCategoryId = new Guid("b17b4f22-1199-4220-b651-e3e6b2927a0a"),
                            Name = "Waxing"
                        },
                        new
                        {
                            Id = new Guid("6d979ed1-2dc2-4aa3-b93e-63bfeaa236bc"),
                            MainCategoryId = new Guid("b17b4f22-1199-4220-b651-e3e6b2927a0a"),
                            Name = "Polishing"
                        },
                        new
                        {
                            Id = new Guid("798939fe-a6c9-44fc-948b-87b3294790c9"),
                            MainCategoryId = new Guid("b17b4f22-1199-4220-b651-e3e6b2927a0a"),
                            Name = "Clay bar treatment"
                        },
                        new
                        {
                            Id = new Guid("a5243a06-e81e-4a72-964d-e91884adf681"),
                            MainCategoryId = new Guid("b17b4f22-1199-4220-b651-e3e6b2927a0a"),
                            Name = "Tire and rim cleaning"
                        },
                        new
                        {
                            Id = new Guid("7fba968c-06a0-48af-b0d6-219795431073"),
                            MainCategoryId = new Guid("b17b4f22-1199-4220-b651-e3e6b2927a0a"),
                            Name = "Deluxe wash (includes waxing and polishing)"
                        },
                        new
                        {
                            Id = new Guid("7a46bde2-59b1-4df5-a72d-ce74451aae1a"),
                            MainCategoryId = new Guid("b17b4f22-1199-4220-b651-e3e6b2927a0a"),
                            Name = "Executive detail (includes interior and exterior detailing)"
                        },
                        new
                        {
                            Id = new Guid("73da4868-555b-496c-b8e2-4188c0f59495"),
                            MainCategoryId = new Guid("b17b4f22-1199-4220-b651-e3e6b2927a0a"),
                            Name = "Ceramic coating application"
                        },
                        new
                        {
                            Id = new Guid("2142b12d-b35f-43d3-9eda-2add0185440e"),
                            MainCategoryId = new Guid("b17b4f22-1199-4220-b651-e3e6b2927a0a"),
                            Name = "Paint protection film installation"
                        });
                });

            modelBuilder.Entity("AutoCareHub.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1456c79b-7080-4586-8467-900a3cb033fe"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1a761c99-cbe8-4f04-b778-2694eef03149",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Luchezar",
                            LastName = "Atanasov",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMINISTRATOR",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("62448744-4356-44dc-a005-0bfb6ba9e8b2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f33346a-b9f9-42c4-bbbb-4f45d334dc6f",
                            Email = "dimitar@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Dimitar",
                            LastName = "Dimitrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "DIMITAR@MAIL.COM",
                            NormalizedUserName = "MEETYOU",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "Meetyou"
                        },
                        new
                        {
                            Id = new Guid("c895a6a4-113d-4669-aa7a-5fecfe3b504c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5b7ee040-d705-4707-9caa-3b50b27ca0e3",
                            Email = "simonipal@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Dimitar",
                            LastName = "Dimitrov",
                            LockoutEnabled = false,
                            NormalizedEmail = "SIMONIPAL@MAIL.COM",
                            NormalizedUserName = "MONIBONBONI",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "MoniBonboni"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AutoCareHub.Data.Models.Appointment", b =>
                {
                    b.HasOne("AutoCareHub.Data.Models.MainCategory", "MainCategory")
                        .WithMany("Appointments")
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoCareHub.Data.Models.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoCareHub.Data.Models.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("MainCategory");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoCareHub.Data.Models.Comment", b =>
                {
                    b.HasOne("AutoCareHub.Data.Models.Service", "Service")
                        .WithMany("Comments")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoCareHub.Data.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoCareHub.Data.Models.Like", b =>
                {
                    b.HasOne("AutoCareHub.Data.Models.Comment", "Comment")
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AutoCareHub.Data.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoCareHub.Data.Models.MainCategoryService", b =>
                {
                    b.HasOne("AutoCareHub.Data.Models.MainCategory", "MainCategory")
                        .WithMany("MainCategoryServices")
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoCareHub.Data.Models.Service", "Service")
                        .WithMany("MainCategoryServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCategory");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AutoCareHub.Data.Models.Rating", b =>
                {
                    b.HasOne("AutoCareHub.Data.Models.Service", "Service")
                        .WithMany("Ratings")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoCareHub.Data.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoCareHub.Data.Models.Service", b =>
                {
                    b.HasOne("AutoCareHub.Data.Models.User", "User")
                        .WithMany("Services")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoCareHub.Data.Models.SubCategory", b =>
                {
                    b.HasOne("AutoCareHub.Data.Models.MainCategory", "MainCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("MainCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("AutoCareHub.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("AutoCareHub.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AutoCareHub.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("AutoCareHub.Data.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoCareHub.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AutoCareHub.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AutoCareHub.Data.Models.Comment", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("AutoCareHub.Data.Models.MainCategory", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("MainCategoryServices");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("AutoCareHub.Data.Models.Service", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Comments");

                    b.Navigation("MainCategoryServices");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("AutoCareHub.Data.Models.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Ratings");

                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
